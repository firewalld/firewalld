FWD_START_TEST([service destination multiple IP versions])
AT_KEYWORDS(service gh366)

m4_define([check_firewall_backend_output], [
NFT_LIST_RULES([inet], [filter_IN_public_allow], 0, [dnl
table inet firewalld {
chain filter_IN_public_allow {
tcp dport 22 accept
ip6 daddr fe80::/64 udp dport 546 accept
ip daddr 224.0.0.251 udp dport 5353 accept
ip6 daddr ff02::fb udp dport 5353 accept
}
}
])
IPTABLES_LIST_RULES([filter], [IN_public_allow], 0, [dnl
ACCEPT 6 -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:22 
ACCEPT 17 -- 0.0.0.0/0 224.0.0.251 udp dpt:5353 
])
IP6TABLES_LIST_RULES([filter], [IN_public_allow], 0, [dnl
ACCEPT 6 -- ::/0 ::/0 tcp dpt:22 
ACCEPT 17 -- ::/0 fe80::/64 udp dpt:546 
ACCEPT 17 -- ::/0 ff02::fb udp dpt:5353 
])])

FWD_CHECK([-q --zone=public --add-service=mdns])
check_firewall_backend_output
FWD_CHECK([-q --zone=public --remove-service=mdns])

FWD_CHECK([-q --zone=public --add-rich-rule="rule service name="mdns" accept"])
check_firewall_backend_output

dnl negative tests
FWD_CHECK([-q --zone=public --add-rich-rule='rule family="ipv4" destination address="10.10.10.0/24" service name="mdns" accept'], 122)

m4_undefine([check_firewall_backend_output])
FWD_END_TEST([-e '/ERROR: INVALID_RULE: Destination conflict with service/d'])
